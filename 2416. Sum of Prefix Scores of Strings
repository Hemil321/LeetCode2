struct Node{
    Node* links[26];
    int count;
    
    bool containsKey(char ch){
        return (links[ch - 'a'] != NULL);
    }
    
    Node* get(char ch){
        return links[ch - 'a'];
    }
    
    void put(char ch, Node* node){
        links[ch - 'a'] = node;
    }
};

class Trie{
    Node* root;
    public:
    Trie(){
        root = new Node();
    }
    
    void insert(string& curr){
        Node* node = root;
        for(char& ch:curr){
            if(!node -> containsKey(ch)){
                node -> put(ch, new Node());
            }
            node = node -> get(ch);
            node -> count++;
        }
    }
    
    void addPrefix(string& curr, vector<int>& ans, int i){
        Node* node = root;
        for(char& ch:curr){
            node = node -> get(ch);
            ans[i] += node -> count;
        }
    }
};

class Solution {
public:
    vector<int> sumPrefixScores(vector<string>& words) {
        int n = words.size();
        vector<int> ans(n);
        Trie trie;
        for(auto& j:words){
            trie.insert(j);
        }
        for(int i = 0; i < n; i++){
            trie.addPrefix(words[i], ans, i);
        }
        return ans;
    }
};
